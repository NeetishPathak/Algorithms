#include <iostream>
#include <string>
#include <fstream>
#include <sys/time.h>
using namespace std;

const string selfMainString = "adbabdbcefhrdtcvdbcef";
const string selfNeedle = "cvdb";

/*Function: getMilliseconds (Borrowed from assignment 2)
 * Arguments : NA
 * Returns: long
 * Description: time elapsed in milliseconds at any stage of the program
 * */
long getMilliseconds() {
	timeval tv;
	gettimeofday( &tv, NULL );
	long int ms = tv.tv_sec;
	ms = ms * 1000 + tv.tv_usec / 1000;
	return ms;
}

/*FunctionL kmp
 * Arguments: string, string
 * Return: int
 * DEscription: returns the index at the first occurrence of
 * 				needle string n  in the main string m using kmp approach
 * */
int kmp(string m, string n){


}

/*Function: naive
 * Arguments: string, string
 * Return: int
 * Description: returns the index at the first occurrence of
 * 				needle string n  in the main string m
 * */
int naive(string m, string n){
	unsigned int i=0;
	unsigned int j = 0;

	while(i < m.length()){

		while(n[j] == m[i]){		//Matching the characters
			if(j == n.length()-1){
				return (i - n.length() + 1);
			}
			i++;j++;
		}

		j=0;				//Start the comparison of strings once again

		if(n[j] != m[i]){
			i++; 			//since the current character in the main string is not matching the
							//start of the needle, we can increment the index
		}
	}
	return -1;
}

/*Function: main
 *Parameters: command Line argument for name of the input file
 *Returns : int
 *Description: main function reads the word and the needle from
 *			   the command line argument
 * */
int main(int argc, char* argv[]){

	string mainString = "";
	string needle = "";

	if (argc < 2){				//file name is not entered, so red your own string
		mainString = selfMainString;
		needle = selfNeedle;

	}else{						//read the strings from the input file

		ifstream inputFile(argv[1]);

		if(!inputFile.is_open()){	//input file in not opening
			cout << "Could not open the input file";
		}else{
			getline(inputFile, mainString);
			getline(inputFile, needle);
		}
	}

	//cout << mainString << endl;
	//cout << needle << endl;

	long t0 = getMilliseconds();
	int naiveOp = naive(mainString, needle);
	long t1 = getMilliseconds();

	cout << "found at: " << naiveOp << endl;
	cout << "navive Search Time" << endl;

	return 0;
}
